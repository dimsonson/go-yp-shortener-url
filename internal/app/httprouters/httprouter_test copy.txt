package httprouters_test

import (
	"io"
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"

	"github.com/dimsonson/go-yp-shortener-url/internal/app/handlers"
	"github.com/dimsonson/go-yp-shortener-url/internal/app/storage"
	"github.com/stretchr/testify/assert"
)

func TestHttpRouter(t *testing.T) {

	// определяем структуру теста
	type want struct {
		code        int
		response    string
		contentType string
	}

	type req struct {
		metod    string
		endpoint string
		body     string
	}

	// создаём массив тестов: имя и желаемый результат
	tests := []struct {
		name string
		req  req
		want want
	}{
		// определяем все тесты
		{
			name: "POST #1",
			req: req{
				metod:    "POST",
				endpoint: "/",
				body:     "https://pkg.go.dev/io#Reader",
			},
			want: want{
				code:        201,
				response:    "http://",
				contentType: "text/plain; charset=utf-8",
			},
		},
		{
			name: "DEF #1",
			req: req{
				metod:    "PATCH",
				endpoint: "/",
				body:     "",
			},
			want: want{
				code: 400,
			},
		},
		{
			name: "GET #1",
			req: req{
				metod:    "GET",
				endpoint: "/xyz",
				body:     "",
			},
			want: want{
				code:        307,
				response:    "https://",
				contentType: "text/html; charset=utf-8",
			},
		},
	}

	for _, tt := range tests {
		// запускаем каждый тест
		t.Run(tt.name, func(t *testing.T) {
			if tt.name == "DEF #1" {

				//создаем тестирующий запрос
				request1 := httptest.NewRequest(http.MethodGet, tt.req.endpoint, nil)

				// создаём новый Recorder
				w := httptest.NewRecorder()

				// определяем хендлер
				h := http.HandlerFunc(handlers.DefHandler)

				// запускаем сервер
				h.ServeHTTP(w, request1)
				resp := w.Result()

				// проверяем код ответа
				if resp.StatusCode != tt.want.code {
					t.Errorf("Expected status code %d, got %d", tt.want.code, w.Code)
				}
			}
			if tt.name == "GET #1" {
				// создаем запись в базе url
				storage.Db["/xyz"] = "https://pkg.go.dev/github.com/stretchr/testify@v1.8.0/assert#Containsf"

				// создаем тестирующий запрос
				request := httptest.NewRequest(http.MethodGet, tt.req.endpoint, nil)

				// создаём новый Recorder
				w := httptest.NewRecorder()

				// определяем хендлер
				h := http.HandlerFunc(handlers.GetHandler)

				// запускаем сервер
				h.ServeHTTP(w, request)
				resp := w.Result()

				// проверяем код ответа
				if resp.StatusCode != tt.want.code {
					t.Errorf("Expected status code %d, got %d", tt.want.code, w.Code)
				}

				// получаем и проверяем тело ответа
				defer resp.Body.Close()
				resBody, err := io.ReadAll(resp.Body)
				if err != nil {
					t.Fatal(err)
				}

				// проверка содержания строки в теле ответа
				assert.Containsf(t, string(resBody), tt.want.response, "error message %s", "formatted")

				// заголовок ответа
				if resp.Header.Get("Content-Type") != tt.want.contentType {
					t.Errorf("Expected Content-Type %s, got %s", tt.want.contentType, resp.Header.Get("Content-Type"))
				}
			}
			if tt.name == "POST #1" {
				// создаем тестирующий запрос
				request := httptest.NewRequest(http.MethodPost, "/", strings.NewReader("http://localhost:8080/"))

				// создаём новый Recorder

				w := httptest.NewRecorder()

				// определяем хендлер
				h := http.HandlerFunc(handlers.PostHandler)

				// запускаем сервер
				h.ServeHTTP(w, request)
				resp := w.Result()

				// проверяем код ответа
				if resp.StatusCode != tt.want.code {
					t.Errorf("Expected status code %d, got %d", tt.want.code, w.Code)
				}

				// получаем и проверяем тело ответа
				defer resp.Body.Close()
				resBody, err := io.ReadAll(resp.Body)
				if err != nil {
					t.Fatal(err)
				}

				// проверка содержания строки в теле ответа
				assert.Containsf(t, string(resBody), tt.want.response, "error message %s", "formatted")

				// заголовок ответа
				if resp.Header.Get("Content-Type") != tt.want.contentType {
					t.Errorf("Expected Content-Type %s, got %s", tt.want.contentType, resp.Header.Get("Content-Type"))
				}
			}

		})
	}
}
