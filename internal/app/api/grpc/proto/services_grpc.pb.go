// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: services.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PutClient is the client API for Put service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PutClient interface {
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	PutBatch(ctx context.Context, in *PutBatchRequest, opts ...grpc.CallOption) (*PutBatchResponse, error)
}

type putClient struct {
	cc grpc.ClientConnInterface
}

func NewPutClient(cc grpc.ClientConnInterface) PutClient {
	return &putClient{cc}
}

func (c *putClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, "/proto.Put/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *putClient) PutBatch(ctx context.Context, in *PutBatchRequest, opts ...grpc.CallOption) (*PutBatchResponse, error) {
	out := new(PutBatchResponse)
	err := c.cc.Invoke(ctx, "/proto.Put/PutBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PutServer is the server API for Put service.
// All implementations must embed UnimplementedPutServer
// for forward compatibility
type PutServer interface {
	Put(context.Context, *PutRequest) (*PutResponse, error)
	PutBatch(context.Context, *PutBatchRequest) (*PutBatchResponse, error)
	mustEmbedUnimplementedPutServer()
}

// UnimplementedPutServer must be embedded to have forward compatible implementations.
type UnimplementedPutServer struct {
}

func (UnimplementedPutServer) Put(context.Context, *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedPutServer) PutBatch(context.Context, *PutBatchRequest) (*PutBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutBatch not implemented")
}
func (UnimplementedPutServer) mustEmbedUnimplementedPutServer() {}

// UnsafePutServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PutServer will
// result in compilation errors.
type UnsafePutServer interface {
	mustEmbedUnimplementedPutServer()
}

func RegisterPutServer(s grpc.ServiceRegistrar, srv PutServer) {
	s.RegisterService(&Put_ServiceDesc, srv)
}

func _Put_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PutServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Put/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PutServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Put_PutBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PutServer).PutBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Put/PutBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PutServer).PutBatch(ctx, req.(*PutBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Put_ServiceDesc is the grpc.ServiceDesc for Put service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Put_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Put",
	HandlerType: (*PutServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _Put_Put_Handler,
		},
		{
			MethodName: "PutBatch",
			Handler:    _Put_PutBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}
